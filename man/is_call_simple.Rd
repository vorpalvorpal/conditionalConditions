% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predicates.R
\name{is_call_simple}
\alias{is_call_simple}
\title{is_call_simple function from rlang}
\usage{
is_call_simple(x, ns = NULL)
}
\arguments{
\item{x}{An object to test.}

\item{ns}{Whether call is namespaced. If \code{NULL}, \code{is_call_simple()}
is insensitive to namespaces. If \code{TRUE}, \code{is_call_simple()}
detects namespaced calls. If \code{FALSE}, it detects unnamespaced
calls.}
}
\description{
Re-export of \code{rlang::is_call_simple}.
See the original package documentation for full details.
list("call_name()") and list("call_ns()") extract the function name or
namespace of list("simple") calls as a string. They return list("NULL") for
complex calls.
list("\n", list(), " Simple calls: ", list("foo()"), ", ", list("bar::foo()"), ".\n", list(), " Complex calls: ", list("foo()()"), ", ", list("bar::foo"), ", ", list("foo$bar()"), ", ", list("(function() NULL)()"), ".\n")

The list("is_call_simple()") predicate helps you determine whether a call
is simple. There are two invariants you can count on:
list("\n", list(), " If ", list("is_call_simple(x)"), " returns ", list("TRUE"), ", ", list("call_name(x)"), " returns a\n", "string. Otherwise it returns ", list("NULL"), ".\n", list(), " If ", list("is_call_simple(x, ns = TRUE)"), " returns ", list("TRUE"), ", ", list("call_ns()"), "\n", "returns a string. Otherwise it returns ", list("NULL"), ".\n")
}
