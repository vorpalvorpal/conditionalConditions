% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predicates.R
\name{is_lambda}
\alias{is_lambda}
\alias{are_lambda,}
\alias{is_not_lambda,}
\alias{are_not_lambda}
\alias{is_not_lambda}
\alias{are_lambda}
\title{Convert to function}
\usage{
is_lambda(x)

is_not_lambda(x)

are_lambda(x)

are_not_lambda(x)
}
\arguments{
\item{x}{A function or formula.

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function
with up to two arguments: \code{.x} (single argument) or \code{.x} and \code{.y}
(two arguments). The \code{.} placeholder can be used instead of \code{.x}.
This allows you to create very compact anonymous functions (lambdas) with up
to two inputs. Functions created from formulas have a special
class. Use \code{is_lambda()} to test for it.

If a \strong{string}, the function is looked up in \code{env}. Note that
this interface is strictly for user convenience because of the
scoping issues involved. Package developers should avoid
supplying functions by name and instead supply them by value.}
}
\value{
\itemize{
\item Calls to \code{is_lambda} are guaranteed to return a scalar boolean (ie. a single \code{TRUE} or \code{FALSE} value). If an argument of length > 1 is given, \code{FALSE} is returned.
\item \code{are_lambda} is a wrapper around \code{\link[purrr]{map_lgl}(vec, \(i) is_lambda(i, ...))}. A boolean vector of the same length as the input is guaranteed.
\item Calls to \code{is_not_lambda}/\code{are_not_lambda} negate the output of \code{is_lambda}/\code{are_lambda}.
}
}
\description{
This is a re-export of \code{\link[rlang:as_function]{rlang::is_lambda()}}, modified to have standardised naming and standardised vector handling.
Documentation is atuomatically generated from the original package documentation. See the \code{\link[rlang:as_function]{original}} for full details.

\code{as_function()} transforms a one-sided formula into a function.
This powers the lambda syntax in packages like purrr.
}
