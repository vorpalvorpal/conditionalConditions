% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predicates.R
\name{is_lambda}
\alias{is_lambda}
\title{is_lambda function from rlang}
\usage{
is_lambda(x)
}
\arguments{
\item{x}{A function or formula.

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function
with up to two arguments: \code{.x} (single argument) or \code{.x} and \code{.y}
(two arguments). The \code{.} placeholder can be used instead of \code{.x}.
This allows you to create very compact anonymous functions (lambdas) with up
to two inputs. Functions created from formulas have a special
class. Use \code{is_lambda()} to test for it.

If a \strong{string}, the function is looked up in \code{env}. Note that
this interface is strictly for user convenience because of the
scoping issues involved. Package developers should avoid
supplying functions by name and instead supply them by value.}
}
\description{
Re-export of \code{rlang::is_lambda}.
See the original package documentation for full details.
list("as_function()") transforms a one-sided formula into a function.
This powers the lambda syntax in packages like purrr.
}
