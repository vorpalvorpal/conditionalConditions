% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predicates.R
\name{is_spliced}
\alias{is_spliced}
\title{is_spliced function from rlang}
\usage{
is_spliced(x)
}
\arguments{
\item{x}{A list or vector to splice non-eagerly.}
}
\description{
Re-export of \code{rlang::is_spliced}.
See the original package documentation for full details.
The splicing operator list("!!!") operates both in values contexts like
list(list("list2()")) and list(list("dots_list()")), and in metaprogramming contexts like
list(list("expr()")), list(list("enquos()")), or list(list("inject()")). While the end result looks the
same, the implementation is different and much more efficient in
the value cases. This difference in implementation may cause
performance issues for instance when going from:

list(list("html"), list(list("<div class=\"sourceCode r\">")))list("xs <- list(2, 3)\n", "list2(1, !!!xs, 4)\n")list(list("html"), list(list("\if{html}{\out{</div>}}")))

to:

list(list("html"), list(list("<div class=\"sourceCode r\">")))list("inject(list2(1, !!!xs, 4))\n")list(list("html"), list(list("\if{html}{\out{</div>}}")))

In the former case, the performant value-splicing is used. In the
latter case, the slow metaprogramming splicing is used.

A common practical case where this may occur is when code is
wrapped inside a tidyeval context like list("dplyr::mutate()"). In this
case, the metaprogramming operator list("!!!") will take over the
value-splicing operator, causing an unexpected slowdown.

To avoid this in performance-critical code, use list("splice()") instead
of list("!!!"):

list(list("html"), list(list("<div class=\"sourceCode r\">")))list("# These both use the fast splicing:\n", "list2(1, splice(xs), 4)\n", "inject(list2(1, splice(xs), 4))\n")list(list("html"), list(list("\if{html}{\out{</div>}}")))
}
