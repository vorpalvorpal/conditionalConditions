% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predicates.R
\name{is_expression}
\alias{is_expression}
\title{is_expression function from rlang}
\usage{
is_expression(x)
}
\arguments{
\item{x}{An object to test.}
}
\description{
Re-export of \code{rlang::is_expression}.
See the original package documentation for full details.
In rlang, an list("expression") is the return type of list(list("parse_expr()")), the
set of objects that can be obtained from parsing R code. Under this
definition expressions include numbers, strings, list("NULL"), symbols,
and function calls. These objects can be classified as:
list("\n", list(), " Symbolic objects, i.e. symbols and function calls (for which\n", list("is_symbolic()"), " returns ", list("TRUE"), ")\n", list(), " Syntactic literals, i.e. scalar atomic objects and ", list("NULL"), "\n", "(testable with ", list("is_syntactic_literal()"), ")\n")

list("is_expression()") returns list("TRUE") if the input is either a symbolic
object or a syntactic literal. If a call, the elements of the call
must all be expressions as well. Unparsable calls are not
considered expressions in this narrow definition.

Note that in base R, there exists list(list("expression()")) vectors, a data
type similar to a list that supports special attributes created by
the parser called source references. This data type is not
supported in rlang.
}
