% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predicates.R
\name{is_integer}
\alias{is_integer}
\alias{are_integer,}
\alias{is_not_integer,}
\alias{are_not_integer}
\alias{is_not_integer}
\alias{are_integer}
\title{Check if an argument is vector of type integer}
\usage{
is_integer(
  x,
  lower = -Inf,
  upper = Inf,
  any.missing = TRUE,
  all.missing = TRUE,
  len = NULL,
  min.len = NULL,
  max.len = NULL,
  unique = FALSE,
  sorted = FALSE,
  names = NULL,
  typed.missing = FALSE,
  null.ok = FALSE
)

is_not_integer(
  x,
  lower,
  upper,
  any.missing,
  all.missing,
  len,
  min.len,
  max.len,
  unique,
  sorted,
  names,
  typed.missing,
  null.ok
)

are_integer(
  x,
  lower,
  upper,
  any.missing,
  all.missing,
  len,
  min.len,
  max.len,
  unique,
  sorted,
  names,
  typed.missing,
  null.ok
)

are_not_integer(
  x,
  lower,
  upper,
  any.missing,
  all.missing,
  len,
  min.len,
  max.len,
  unique,
  sorted,
  names,
  typed.missing,
  null.ok
)
}
\arguments{
\item{x}{any\cr
Object to check.}

\item{lower}{\code{numeric(1)}\cr
Lower value all elements of \code{x} must be greater than or equal to.}

\item{upper}{\code{numeric(1)}\cr
Upper value all elements of \code{x} must be lower than or equal to.}

\item{any.missing}{\code{logical(1)}\cr
Are vectors with missing values allowed? Default is \code{TRUE}.}

\item{all.missing}{\code{logical(1)}\cr
Are vectors with no non-missing values allowed? Default is \code{TRUE}.
Note that empty vectors do not have non-missing values.}

\item{len}{\code{integer(1)}\cr
Exact expected length of \code{x}.}

\item{min.len}{\code{integer(1)}\cr
Minimal length of \code{x}.}

\item{max.len}{\code{integer(1)}\cr
Maximal length of \code{x}.}

\item{unique}{\code{logical(1)}\cr
Must all values be unique? Default is \code{FALSE}.}

\item{sorted}{\code{logical(1)}\cr
Elements must be sorted in ascending order. Missing values are ignored.}

\item{names}{\code{character(1)}\cr
Check for names. See \code{\link{checkNamed}} for possible values.
Default is \dQuote{any} which performs no check at all.
Note that you can use \code{\link{checkSubset}} to check for a specific set of names.}

\item{typed.missing}{\code{logical(1)}\cr
If set to \code{FALSE} (default), all types of missing values (\code{NA}, \code{NA_integer_},
\code{NA_real_}, \code{NA_character_} or \code{NA_character_}) as well as empty vectors are allowed
while type-checking atomic input.
Set to \code{TRUE} to enable strict type checking.}

\item{null.ok}{\code{logical(1)}\cr
If set to \code{TRUE}, \code{x} may also be \code{NULL}.
In this case only a type check of \code{x} is performed, all additional checks are disabled.}
}
\value{
\itemize{
\item Calls to \code{is_integer} are guaranteed to return a scalar boolean (ie. a single \code{TRUE} or \code{FALSE} value). If an argument of length > 1 is given, \code{FALSE} is returned.
\item \code{are_integer} is a wrapper around \code{\link[purrr]{map_lgl}(vec, \(i) is_integer(i, ...))}. A boolean vector of the same length as the input is guaranteed.
\item Calls to \code{is_not_integer}/\code{are_not_integer} negate the output of \code{is_integer}/\code{are_integer}.}
}
\description{
This is a re-export of \code{\link[checkmate:checkInteger]{checkmate::test_integer()}}, modified to have standardised naming and standardised vector handling.
Documentation is atuomatically generated from the original package documentation. See the \code{\link[checkmate:checkInteger]{original}} for full details.

Check if an argument is vector of type integer.
}
