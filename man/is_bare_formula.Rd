% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predicates.R
\name{is_bare_formula}
\alias{is_bare_formula}
\alias{are_bare_formula,}
\alias{is_not_bare_formula,}
\alias{are_not_bare_formula}
\alias{is_not_bare_formula}
\alias{are_bare_formula}
\title{Is object a formula?}
\usage{
is_bare_formula(x, scoped = TRUE, lhs = NULL)

is_not_bare_formula(x, scoped = TRUE, lhs = NULL)

are_bare_formula(x, scoped = TRUE, lhs = NULL)

are_not_bare_formula(x, scoped = TRUE, lhs = NULL)
}
\arguments{
\item{x}{An object to test.}

\item{scoped}{A boolean indicating whether the quosure is scoped,
that is, has a valid environment attribute and inherits from
\code{"formula"}. If \code{NULL}, the scope is not inspected.}

\item{lhs}{A boolean indicating whether the formula has a left-hand
side. If \code{NULL}, the LHS is not inspected and \code{is_formula()}
returns \code{TRUE} for both one- and two-sided formulas.}
}
\value{
\itemize{
\item Calls to \code{is_bare_formula} are guaranteed to return a scalar boolean (ie. a single \code{TRUE} or \code{FALSE} value). If an argument of length > 1 is given, \code{FALSE} is returned.
\item \code{are_bare_formula} is a wrapper around \code{\link[purrr]{map_lgl}(vec, \(i) is_bare_formula(i, ...))}. A boolean vector of the same length as the input is guaranteed.
\item Calls to \code{is_not_bare_formula}/\code{are_not_bare_formula} negate the output of \code{is_bare_formula}/\code{are_bare_formula}.}
}
\description{
This is a re-export of \code{\link[rlang:is_formula]{rlang::is_bare_formula()}}, modified to have standardised naming and standardised vector handling.
Documentation is atuomatically generated from the original package documentation. See the \code{\link[rlang:is_formula]{original}} for full details.

\code{is_formula()} tests whether \code{x} is a call to \code{~}. \code{is_bare_formula()}
tests in addition that \code{x} does not inherit from anything else than
\code{"formula"}.

\strong{Note}: When we first implemented \code{is_formula()}, we thought it
best to treat unevaluated formulas as formulas by default (see
section below). Now we think this default introduces too many edge
cases in normal code. We recommend always supplying \code{scoped = TRUE}. Unevaluated formulas can be handled via a \code{is_call(x, "~")}
branch.
}
