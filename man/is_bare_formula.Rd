% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predicates.R
\name{is_bare_formula}
\alias{is_bare_formula}
\title{is_bare_formula function from rlang}
\usage{
is_bare_formula(x, scoped = TRUE, lhs = NULL)
}
\arguments{
\item{x}{An object to test.}

\item{scoped}{A boolean indicating whether the quosure is scoped,
that is, has a valid environment attribute and inherits from
\code{"formula"}. If \code{NULL}, the scope is not inspected.}

\item{lhs}{A boolean indicating whether the formula has a left-hand
side. If \code{NULL}, the LHS is not inspected and \code{is_formula()}
returns \code{TRUE} for both one- and two-sided formulas.}
}
\description{
Re-export of \code{rlang::is_bare_formula}.
See the original package documentation for full details.
list("is_formula()") tests whether list("x") is a call to list("~"). list("is_bare_formula()")
tests in addition that list("x") does not inherit from anything else than
list("\"formula\"").

list("Note"): When we first implemented list("is_formula()"), we thought it
best to treat unevaluated formulas as formulas by default (see
section below). Now we think this default introduces too many edge
cases in normal code. We recommend always supplying list("scoped = TRUE"). Unevaluated formulas can be handled via a list("is_call(x, \"~\")")
branch.
}
