% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predicates.R
\name{is_scalar_integerish}
\alias{is_scalar_integerish}
\title{is_scalar_integerish function from rlang}
\usage{
is_scalar_integerish(x, finite = NULL)
}
\arguments{
\item{x}{Object to be tested.}

\item{finite}{Whether all values of the vector are finite. The
non-finite values are \code{NA}, \code{Inf}, \code{-Inf} and \code{NaN}. Setting this
to something other than \code{NULL} can be expensive because the whole
vector needs to be traversed and checked.}
}
\description{
Re-export of \code{rlang::is_scalar_integerish}.
See the original package documentation for full details.
These predicates check whether R considers a number vector to be
integer-like, according to its own tolerance check (which is in
fact delegated to the C library). This function is not adapted to
data analysis, see the help for list(list("base::is.integer()")) for examples
of how to check for whole numbers.

Things to consider when checking for integer-like doubles:
list("\n", list(), " This check can be expensive because the whole double vector has\n", "to be traversed and checked.\n", list(), " Large double values may be integerish but may still not be\n", "coercible to integer. This is because integers in R only support\n", "values up to ", list("2^31 - 1"), " while numbers stored as double can be\n", "much larger.\n")
}
