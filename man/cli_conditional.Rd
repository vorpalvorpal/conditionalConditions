% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cli_conditionals.R
\name{cli_conditional}
\alias{cli_conditional}
\alias{abort_if}
\alias{abort_if_not}
\alias{warn_if}
\alias{warn_if_not}
\alias{inform_if}
\alias{inform_if_not}
\title{Conditional CLI Message Functions}
\usage{
abort_if(
  condition,
  message,
  expr = NULL,
  ...,
  call = .envir,
  .envir = parent.frame(),
  .frame = .envir
)

abort_if_not(
  condition,
  message,
  expr = NULL,
  ...,
  call = .envir,
  .envir = parent.frame(),
  .frame = .envir
)

warn_if(condition, message, expr = NULL, ..., .envir = parent.frame())

warn_if_not(condition, message, expr = NULL, ..., .envir = parent.frame())

inform_if(condition, message, expr = NULL, ..., .envir = parent.frame())

inform_if_not(condition, message, expr = NULL, ..., .envir = parent.frame())
}
\arguments{
\item{condition}{Logical. For `*_if` functions, the message is displayed when TRUE.
For `*_if_not` functions, the message is displayed when FALSE.}

\item{message}{The message to display}

\item{expr}{An expression to be run if condition is TRUE (or FALSE for `*_if_not`).
This is run before calling `cli::cli_abort`/`cli::cli_warn`/`cli::cli_inform`.
This is useful for the common case of cleanup tasks before exit or returning early
with a warning message.}

\item{...}{Additional arguments passed by `cli::cli_abort`/`cli::cli_warn`/`cli::cli_inform` to
`rlang::abort`/`rlang::warn`/`rlang::inform`}

\item{call}{The execution environment for error messages}

\item{.envir}{The environment to use for message interpolation}

\item{.frame}{The environment to use for error messages}
}
\value{
Nothing is returned; these functions are called for their side effects
}
\description{
These functions provide convenient wrappers around cli message functions that
only execute when a condition is TRUE (for `*_if`) or FALSE (for `*_if_not`).
They maintain all the functionality of the original cli functions while adding
conditional execution.
}
\examples{
\dontrun{
x <- -5
abort_if(x < 0, "Value must be positive")
# The use of pipes with `is_*` family functions allows English-like composition
warn_if(x |> is_not_number(), "x must be a number")
# All the features of `cli` messages are available.
abort_if(x |> is_not_integerish(),
  c("{.arg x} must be integerish."
  "x" = case_when(is_number(x)  ~ "Was {x} instead",
                  is_numeric(x) ~ "Was length {length(x)} vector instead",
                  TRUE          ~ "Was class {.cls class(x)} instead")
inform_if(x > 100, "Large value detected: {x}")
# The `expr` argument is useful for early return or cleanup
warn_if_not(x >= 0, "Value should be non-negative", return(x))
do_cleanup <- function(){} # cleanup tasks
abort_if(x |> is_null(),
         "x can't be NULL",
         {do_cleanup()
          return(x)})
}

}
